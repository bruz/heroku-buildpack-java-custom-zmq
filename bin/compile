#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e

logger -p user.notice -t "slugc[$$]" "language_pack_java java_compile_start"

BIN_DIR=$(cd $(dirname $0); pwd) # absolute path
# parse args
BUILD_DIR=$1
CACHE_DIR=$2
LOGGER_FLAGS=""

echo -n "-----> BIN_DIR = ${BIN_DIR}"
echo -n "-----> BUILD_DIR = ${BUILD_DIR}"
echo -n "-----> CACHE_DIR = ${CACHE_DIR}"

curl --silent --location http://heroku-jvm-common.s3.amazonaws.com/jvm-buildpack-common.tar.gz | tar xz
. bin/java

KEEP_M2_CACHE="true"

# create default system.properties for apps that had the jdk vendored in 
if [ -f ${CACHE_DIR}/.jdk/vendor ] && [ ! -f ${BUILD_DIR}/system.properties ]; then
  echo "java.runtime.version=1.6" > ${BUILD_DIR}/system.properties
fi

if [ -f ${CACHE_DIR}/system.properties ] && [ ! -f ${BUILD_DIR}/system.properties ]; then
  cp ${CACHE_DIR}/system.properties ${BUILD_DIR}/system.properties
fi

if [ ! -d $CACHE_DIR ]; then
  LOGGER_FLAGS="$LOGGER_FLAGS new_java_app"
  logger -p user.notice -t "slugc[$$]" "language_pack_java new_java_app"
  KEEP_M2_CACHE="false"
  if [ ! -f ${BUILD_DIR}/system.properties ]; then 
    echo "java.runtime.version=1.6" > ${BUILD_DIR}/system.properties; 
  fi
elif [ -f $CACHE_DIR/removeM2Cache ]; then
  KEEP_M2_CACHE="false"
fi

#create the cache dir if it doesn't exist
mkdir -p $CACHE_DIR

# install JDK 
if [ -f ${BUILD_DIR}/system.properties ]; then
  logger -p user.notice -t "slugc[$$]" "language_pack_java download_jdk"
  LOGGER_FLAGS="$LOGGER_FLAGS download_jdk"
  javaVersion=$(detect_java_version ${BUILD_DIR})
  echo -n "-----> Installing OpenJDK ${javaVersion}..."
  install_java ${BUILD_DIR} ${javaVersion}
  jdk_overlay ${BUILD_DIR}
  echo "done"
  cp ${BUILD_DIR}/system.properties ${CACHE_DIR}/
fi

logger -p user.notice -t "slugc[$$]" "language_pack_java java_compile_end $LOGGER_FLAGS"

VENDORED_LIBZMQ="http://vulcan-lpetre.herokuapp.com/output/03e1a880-0ddc-4478-9d4f-ed9b248ae65c"
VENDORED_UUID="http://vulcan-lpetre.herokuapp.com/output/e6b47a30-4832-4fe6-944e-9770af028d51"

echo "-----> Bootstrapping libzmq."

export START_DIR=$(pwd)

mkdir -p .heroku/vendor
cd .heroku/vendor

curl -s -L -o tmp-uuid.tar.gz $VENDORED_UUID
tar -zxvf tmp-uuid.tar.gz > /dev/null
rm tmp-uuid.tar.gz

curl -s -L -o tmp-libzmq.tar.gz $VENDORED_LIBZMQ
tar -zxvf tmp-libzmq.tar.gz > /dev/null
rm tmp-libzmq.tar.gz

export ZMQ_DIR=$(pwd)
cd $START_DIR

